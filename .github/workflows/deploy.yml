name: Deploy to GitHub Pages

# Updated workflow for GitHub Pages
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask flask-sqlalchemy gunicorn

      - name: Generate static files
        run: |
          # Print Python version
          python --version
          
          # Create site directory
          mkdir -p _site
          cp -r static _site/
          cp -r data _site/
          
          # Run build script
          echo "Running build_static.py..."
          python build_static.py
          
          # Create GitHub Pages specific files
          touch .nojekyll
          cp .nojekyll _site/
          [ -f static/CNAME ] && cp static/CNAME _site/ || echo "No CNAME file found"
          
          # Create a 404.html at the root level
          if [ ! -f _site/404.html ]; then
            cp _site/static/404.html _site/404.html || echo "No 404.html file to copy"
          fi
          
          # Create necessary .htaccess file to handle routing
          echo "Creating .htaccess file for GitHub Pages"
          cat > _site/.htaccess << 'EOL'
          RewriteEngine On
          RewriteBase /
          # If the requested resource doesn't exist, route to index.html
          RewriteRule ^index\.html$ - [L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          EOL
          
          # Create a special GitHub Pages 404 handler
          cat > _site/404.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Redirecting...</title>
              <script>
                  // Get the current path
                  const path = window.location.pathname;
                  const repo = path.split('/')[1]; // Get repo name from URL
                  
                  // Redirect to index with correct repo path
                  window.location.href = '/' + repo + '/?path=' + encodeURIComponent(path);
              </script>
          </head>
          <body>
              <p>Redirecting...</p>
          </body>
          </html>
          EOL
          
          # List the generated files
          echo "Site directory structure:"
          find _site -type f | sort
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
  
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4